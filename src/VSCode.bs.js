// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function map(x, f) {
  return Belt_Option.map(x, (async function (result) {
                var result$p = await result;
                return f(result$p);
              }));
}

var ProviderResult = {
  map: map
};

var ThemeColor = {};

var ThemeIcon = {};

function make(value) {
  return value._0;
}

function classify(v) {
  if (typeof v === "string") {
    return {
            TAG: "String",
            _0: v,
            [Symbol.for("name")]: "String"
          };
  } else {
    return {
            TAG: "Others",
            _0: v,
            [Symbol.for("name")]: "Others"
          };
  }
}

function map$1(xs, f) {
  var s = classify(xs);
  if (s.TAG === "String") {
    return s._0;
  } else {
    return ({
              TAG: "Others",
              _0: f(s._0),
              [Symbol.for("name")]: "Others"
            })._0;
  }
}

var StringOr = {
  make: make,
  classify: classify,
  map: map$1
};

function make$1(value) {
  return value._0;
}

function classify$1(v) {
  if (v.then && typeof v.then === "function") {
    return {
            TAG: "Promise",
            _0: v,
            [Symbol.for("name")]: "Promise"
          };
  } else {
    return {
            TAG: "Others",
            _0: v,
            [Symbol.for("name")]: "Others"
          };
  }
}

var PromiseOr = {
  make: make$1,
  classify: classify$1
};

function array(v) {
  return v;
}

function single(v) {
  return v;
}

function classify$2(v) {
  if (Array.isArray(v)) {
    return {
            TAG: "Array",
            _0: v,
            [Symbol.for("name")]: "Array"
          };
  } else {
    return {
            TAG: "Single",
            _0: v,
            [Symbol.for("name")]: "Single"
          };
  }
}

function map$2(f, xs) {
  var s = classify$2(xs);
  if (s.TAG === "Array") {
    return Js_array.map(f, s._0);
  } else {
    return f(s._0);
  }
}

var ArrayOr = {
  array: array,
  single: single,
  classify: classify$2,
  map: map$2
};

function onMessage(callback) {
  var onMessage$1 = (callback => window.addEventListener('message', event => callback(event.data)));
  onMessage$1(callback);
}

var Api = {
  onMessage: onMessage
};

var Disposable = {};

var Memento = {};

var Uri = {};

var EnvironmentVariableMutatorType = {};

var Command = {};

var EnvironmentVariableMutator = {};

var EnvironmentVariableCollection = {};

var LanguageModelAccessInformation = {};

var SecretStorageChangeEvent = {};

var SecretStorage = {};

var ExtensionMode = {};

var ExtensionKind = {};

var Extension = {};

var ExtensionContext = {};

var simple = {};

function sized(v) {
  return v;
}

var Layout = {
  simple: simple,
  sized: sized
};

var Commands = {
  Layout: Layout
};

var DebugConsole = {};

var DebugConfiguration = {};

var WorkspaceFolder = {};

var Breakpoint = {};

var DebugProtocolBreakpoint = {};

var DebugSession = {};

var BreakpointsChangeEvent = {};

var DebugSessionCustomEvent = {};

var DebugProtocolSource = {};

var DebugAdapterExecutableOptions = {};

var DebugAdapterExecutable = {};

var DebugAdapterDescriptorFactory = {};

var Debug = {};

var Clipboard = {};

var UIKind = {};

var Env = {};

var ViewColumn = {};

var WebviewOptions = {};

var Webview = {};

var OnDidChangeViewStateEvent = {};

var Options = {};

function iconPath(self) {
  return Belt_Option.map(self.iconPath, (function ($$case) {
                if (Belt_Option.isSome(Js_dict.get($$case, "dark"))) {
                  return {
                          TAG: "LightAndDark",
                          _0: $$case,
                          [Symbol.for("name")]: "LightAndDark"
                        };
                } else {
                  return {
                          TAG: "Uri",
                          _0: $$case,
                          [Symbol.for("name")]: "Uri"
                        };
                }
              }));
}

var WebviewPanel = {
  OnDidChangeViewStateEvent: OnDidChangeViewStateEvent,
  Options: Options,
  iconPath: iconPath
};

var Position = {};

var $$Range = {};

var TextLine = {};

var EndOfLine = {};

var TextDocument = {};

var TextEditorCursorStyle = {};

var TextEditorLineNumbersStyle = {};

var TextEditorOptions = {};

var $$Selection = {};

var TextEditorEdit = {};

var SnippetString = {};

var TextEditorRevealType = {};

var TextEditorDecorationType = {};

var MarkdownString = {};

var ThemableDecorationAttachmentRenderOptions = {};

var ThemableDecorationInstanceRenderOptions = {};

var DecorationInstanceRenderOptions = {};

var DecorationOptions = {};

var TextEditor = {};

var TerminalOptions = {};

var Pseudoterminal = {};

var ExtensionTerminalOptions = {};

function terminalOptions(v) {
  return v;
}

function extensionTerminalOptions(v) {
  return v;
}

function classify$3(v) {
  if ((v.hasOwnProperty('pty'))) {
    return {
            TAG: "ExtensionTerminalOptions",
            _0: v,
            [Symbol.for("name")]: "ExtensionTerminalOptions"
          };
  } else {
    return {
            TAG: "TerminalOptions",
            _0: v,
            [Symbol.for("name")]: "TerminalOptions"
          };
  }
}

var TerminalOptionsOrExtensionTerminalOptions = {
  terminalOptions: terminalOptions,
  extensionTerminalOptions: extensionTerminalOptions,
  classify: classify$3
};

var Terminal = {};

var WindowState = {};

var TextEditorOptionsChangeEvent = {};

var TextEditorSelectionChangeKind = {};

var TextEditorSelectionChangeEvent = {};

var TextEditorViewColumnChangeEvent = {};

var TextEditorVisibleRangesChangeEvent = {};

var InputBox = {};

var OutputChannel = {};

function $$case(raw) {
  var match = raw["color"];
  if (match !== undefined) {
    return {
            TAG: "Uri",
            _0: raw,
            [Symbol.for("name")]: "Uri"
          };
  }
  var match$1 = raw["dark"];
  if (match$1 !== undefined) {
    return {
            TAG: "DarkAndLight",
            _0: raw,
            [Symbol.for("name")]: "DarkAndLight"
          };
  } else {
    return {
            TAG: "ThemeIcon",
            _0: raw,
            [Symbol.for("name")]: "ThemeIcon"
          };
  }
}

var IconPath = {
  $$case: $$case
};

var QuickInput = {};

var QuickInputButton = {};

var QuickInputButtons = {};

var QuickPickItemKind = {};

var QuickPickItem = {};

var QuickPickItemButtonEvent = {};

var QuickPickOptions = {};

var QuickPick = {};

var AccessibilityInformation = {};

var StatusBarAlignment = {};

var StatusBarItem = {};

var OverviewRulerLane = {};

var DecorationRangeBehavior = {};

var DecorationRenderOptions = {};

var TreeViewOptions = {};

var TreeView = {};

function make$2(enableCommandUris, enableScripts, localResourceRoots, portMapping, enableFindWidget, retainContextWhenHidden, param) {
  return {
          enableCommandUris: enableCommandUris,
          enableScripts: enableScripts,
          localResourceRoots: localResourceRoots,
          portMapping: portMapping,
          enableFindWidget: enableFindWidget,
          retainContextWhenHidden: retainContextWhenHidden
        };
}

var WebviewAndWebviewPanelOptions = {
  make: make$2
};

var TreeDataProvider = {};

var WebviewPanelSerializer = {};

var MessageItem = {};

var MessageOptions = {};

var InputBoxValidationSeverity = {};

var InputBoxValidationMessage = {};

var InputBoxOptions = {};

var CancellationToken = {};

var CancellationTokenSource = {};

var OpenDialogOptions = {};

var SaveDialogOptions = {};

var WorkspaceFolderPickOptions = {};

var Progress = {};

var ProgressLocation = {};

var ProgressOptions = {};

var ProcessOptionsWithViewIdAsLocation = {};

function make$3(preserveFocus, preview, selection, viewColumn, param) {
  return {
          preserveFocus: preserveFocus,
          preview: preview,
          selection: selection,
          viewColumn: viewColumn
        };
}

var TextDocumentShowOptions = {
  make: make$3
};

var ColorThemeKind = {};

var ColorTheme = {};

var CustomDocumentOpenContext = {};

var CustomReadonlyEditorProvider = {};

var CustomTextEditorProvider = {};

var CustomEditorProvider = {};

var TerminalLinkProvider = {};

var WebviewView = {};

var WebviewViewResolveContext = {};

var WebviewViewProvider = {};

var UriHandler = {};

var FileDecoration = {};

var FileDecorationProvider = {};

var $$Window = {};

var FileType = {};

var FilePermission = {};

var FileRenameEvent = {};

var FileDeleteEvent = {};

var FileStat = {};

var FileSystem = {};

var ConfigurationChangeEvent = {};

var TextDocumentContentChangeEvent = {};

var TextDocumentChangeEvent = {};

var WorkspaceFoldersChangeEvent = {};

var FileCreateEvent = {};

var FileChangeType = {};

var FileChangeEvent = {};

var WorkspaceEditEntryMetadata = {};

var TextEdit = {};

function entries(self) {
  return self.entries().map(function (shit) {
              var toUri = (function (shit) { return shit[0] });
              var toTextEdits = (function (shit) { return shit[1] });
              return [
                      toUri(shit),
                      toTextEdits(shit)
                    ];
            });
}

var WorkspaceEdit = {
  entries: entries
};

var FileWillCreateEvent = {};

var FileWillDeleteEvent = {};

var FileWillRenameEvent = {};

var TextDocumentSaveReason = {};

var TextDocumentWillSaveEvent = {};

var RelativePattern = {};

var GlobPattern = {};

var FileSystemWatcher = {};

var WorkspaceConfiguration = {};

var TextDocumentContentProvider = {};

var TaskProvider = {};

var FileSystemProvider = {};

var Workspace = {};

var Extensions = {};

var DiagnosticChangeEvent = {};

var $$Location = {};

var LocationLink = {};

var DiagnosticRelatedInformation = {};

var DiagnosticSeverity = {};

var DiagnosticTag = {};

var Diagnostic = {};

var DocumentFilter = {};

var DocumentSelector = {};

var DiagnosticCollection = {};

var CallHierarchyItem = {};

var CallHierarchyOutgoingCall = {};

var CallHierarchyIncomingCall = {};

var CallHierarchyProvider = {};

var CodeActionProvider = {};

var CodeActionProviderMetadata = {};

var CodeLens = {};

var CodeLensProvider = {};

var DocumentColorProvider = {};

var CompletionItemProvider = {};

var DeclarationProvider = {};

var Hover = {};

var HoverProvider = {};

function locations(v) {
  return v;
}

function locationLinks(v) {
  return v;
}

function classify$4(v) {
  if ((function (a) { return a.targetRange === undefined})(v)) {
    return {
            TAG: "Location",
            _0: v,
            [Symbol.for("name")]: "Location"
          };
  } else {
    return {
            TAG: "LocationLink",
            _0: v,
            [Symbol.for("name")]: "LocationLink"
          };
  }
}

var LocationLinkOrLocation = {
  locations: locations,
  locationLinks: locationLinks,
  classify: classify$4
};

var DefinitionProvider = {};

var SemanticsTokens = {};

var SemanticTokensLegend = {};

var SemanticTokensBuilder = {};

var DocumentSemanticTokensProvider = {};

var Languages = {};

exports.ProviderResult = ProviderResult;
exports.ThemeColor = ThemeColor;
exports.ThemeIcon = ThemeIcon;
exports.StringOr = StringOr;
exports.PromiseOr = PromiseOr;
exports.ArrayOr = ArrayOr;
exports.Api = Api;
exports.Disposable = Disposable;
exports.Memento = Memento;
exports.Uri = Uri;
exports.EnvironmentVariableMutatorType = EnvironmentVariableMutatorType;
exports.Command = Command;
exports.EnvironmentVariableMutator = EnvironmentVariableMutator;
exports.EnvironmentVariableCollection = EnvironmentVariableCollection;
exports.LanguageModelAccessInformation = LanguageModelAccessInformation;
exports.SecretStorageChangeEvent = SecretStorageChangeEvent;
exports.SecretStorage = SecretStorage;
exports.ExtensionMode = ExtensionMode;
exports.ExtensionKind = ExtensionKind;
exports.Extension = Extension;
exports.ExtensionContext = ExtensionContext;
exports.Commands = Commands;
exports.DebugConsole = DebugConsole;
exports.DebugConfiguration = DebugConfiguration;
exports.WorkspaceFolder = WorkspaceFolder;
exports.Breakpoint = Breakpoint;
exports.DebugProtocolBreakpoint = DebugProtocolBreakpoint;
exports.DebugSession = DebugSession;
exports.BreakpointsChangeEvent = BreakpointsChangeEvent;
exports.DebugSessionCustomEvent = DebugSessionCustomEvent;
exports.DebugProtocolSource = DebugProtocolSource;
exports.DebugAdapterExecutableOptions = DebugAdapterExecutableOptions;
exports.DebugAdapterExecutable = DebugAdapterExecutable;
exports.DebugAdapterDescriptorFactory = DebugAdapterDescriptorFactory;
exports.Debug = Debug;
exports.Clipboard = Clipboard;
exports.UIKind = UIKind;
exports.Env = Env;
exports.ViewColumn = ViewColumn;
exports.WebviewOptions = WebviewOptions;
exports.Webview = Webview;
exports.WebviewPanel = WebviewPanel;
exports.Position = Position;
exports.$$Range = $$Range;
exports.TextLine = TextLine;
exports.EndOfLine = EndOfLine;
exports.TextDocument = TextDocument;
exports.TextEditorCursorStyle = TextEditorCursorStyle;
exports.TextEditorLineNumbersStyle = TextEditorLineNumbersStyle;
exports.TextEditorOptions = TextEditorOptions;
exports.$$Selection = $$Selection;
exports.TextEditorEdit = TextEditorEdit;
exports.SnippetString = SnippetString;
exports.TextEditorRevealType = TextEditorRevealType;
exports.TextEditorDecorationType = TextEditorDecorationType;
exports.MarkdownString = MarkdownString;
exports.ThemableDecorationAttachmentRenderOptions = ThemableDecorationAttachmentRenderOptions;
exports.ThemableDecorationInstanceRenderOptions = ThemableDecorationInstanceRenderOptions;
exports.DecorationInstanceRenderOptions = DecorationInstanceRenderOptions;
exports.DecorationOptions = DecorationOptions;
exports.TextEditor = TextEditor;
exports.TerminalOptions = TerminalOptions;
exports.Pseudoterminal = Pseudoterminal;
exports.ExtensionTerminalOptions = ExtensionTerminalOptions;
exports.TerminalOptionsOrExtensionTerminalOptions = TerminalOptionsOrExtensionTerminalOptions;
exports.Terminal = Terminal;
exports.WindowState = WindowState;
exports.TextEditorOptionsChangeEvent = TextEditorOptionsChangeEvent;
exports.TextEditorSelectionChangeKind = TextEditorSelectionChangeKind;
exports.TextEditorSelectionChangeEvent = TextEditorSelectionChangeEvent;
exports.TextEditorViewColumnChangeEvent = TextEditorViewColumnChangeEvent;
exports.TextEditorVisibleRangesChangeEvent = TextEditorVisibleRangesChangeEvent;
exports.InputBox = InputBox;
exports.OutputChannel = OutputChannel;
exports.IconPath = IconPath;
exports.QuickInput = QuickInput;
exports.QuickInputButton = QuickInputButton;
exports.QuickInputButtons = QuickInputButtons;
exports.QuickPickItemKind = QuickPickItemKind;
exports.QuickPickItem = QuickPickItem;
exports.QuickPickItemButtonEvent = QuickPickItemButtonEvent;
exports.QuickPickOptions = QuickPickOptions;
exports.QuickPick = QuickPick;
exports.AccessibilityInformation = AccessibilityInformation;
exports.StatusBarAlignment = StatusBarAlignment;
exports.StatusBarItem = StatusBarItem;
exports.OverviewRulerLane = OverviewRulerLane;
exports.DecorationRangeBehavior = DecorationRangeBehavior;
exports.DecorationRenderOptions = DecorationRenderOptions;
exports.TreeViewOptions = TreeViewOptions;
exports.TreeView = TreeView;
exports.WebviewAndWebviewPanelOptions = WebviewAndWebviewPanelOptions;
exports.TreeDataProvider = TreeDataProvider;
exports.WebviewPanelSerializer = WebviewPanelSerializer;
exports.MessageItem = MessageItem;
exports.MessageOptions = MessageOptions;
exports.InputBoxValidationSeverity = InputBoxValidationSeverity;
exports.InputBoxValidationMessage = InputBoxValidationMessage;
exports.InputBoxOptions = InputBoxOptions;
exports.CancellationToken = CancellationToken;
exports.CancellationTokenSource = CancellationTokenSource;
exports.OpenDialogOptions = OpenDialogOptions;
exports.SaveDialogOptions = SaveDialogOptions;
exports.WorkspaceFolderPickOptions = WorkspaceFolderPickOptions;
exports.Progress = Progress;
exports.ProgressLocation = ProgressLocation;
exports.ProgressOptions = ProgressOptions;
exports.ProcessOptionsWithViewIdAsLocation = ProcessOptionsWithViewIdAsLocation;
exports.TextDocumentShowOptions = TextDocumentShowOptions;
exports.ColorThemeKind = ColorThemeKind;
exports.ColorTheme = ColorTheme;
exports.CustomDocumentOpenContext = CustomDocumentOpenContext;
exports.CustomReadonlyEditorProvider = CustomReadonlyEditorProvider;
exports.CustomTextEditorProvider = CustomTextEditorProvider;
exports.CustomEditorProvider = CustomEditorProvider;
exports.TerminalLinkProvider = TerminalLinkProvider;
exports.WebviewView = WebviewView;
exports.WebviewViewResolveContext = WebviewViewResolveContext;
exports.WebviewViewProvider = WebviewViewProvider;
exports.UriHandler = UriHandler;
exports.FileDecoration = FileDecoration;
exports.FileDecorationProvider = FileDecorationProvider;
exports.$$Window = $$Window;
exports.FileType = FileType;
exports.FilePermission = FilePermission;
exports.FileRenameEvent = FileRenameEvent;
exports.FileDeleteEvent = FileDeleteEvent;
exports.FileStat = FileStat;
exports.FileSystem = FileSystem;
exports.ConfigurationChangeEvent = ConfigurationChangeEvent;
exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent;
exports.TextDocumentChangeEvent = TextDocumentChangeEvent;
exports.WorkspaceFoldersChangeEvent = WorkspaceFoldersChangeEvent;
exports.FileCreateEvent = FileCreateEvent;
exports.FileChangeType = FileChangeType;
exports.FileChangeEvent = FileChangeEvent;
exports.WorkspaceEditEntryMetadata = WorkspaceEditEntryMetadata;
exports.TextEdit = TextEdit;
exports.WorkspaceEdit = WorkspaceEdit;
exports.FileWillCreateEvent = FileWillCreateEvent;
exports.FileWillDeleteEvent = FileWillDeleteEvent;
exports.FileWillRenameEvent = FileWillRenameEvent;
exports.TextDocumentSaveReason = TextDocumentSaveReason;
exports.TextDocumentWillSaveEvent = TextDocumentWillSaveEvent;
exports.RelativePattern = RelativePattern;
exports.GlobPattern = GlobPattern;
exports.FileSystemWatcher = FileSystemWatcher;
exports.WorkspaceConfiguration = WorkspaceConfiguration;
exports.TextDocumentContentProvider = TextDocumentContentProvider;
exports.TaskProvider = TaskProvider;
exports.FileSystemProvider = FileSystemProvider;
exports.Workspace = Workspace;
exports.Extensions = Extensions;
exports.DiagnosticChangeEvent = DiagnosticChangeEvent;
exports.$$Location = $$Location;
exports.LocationLink = LocationLink;
exports.DiagnosticRelatedInformation = DiagnosticRelatedInformation;
exports.DiagnosticSeverity = DiagnosticSeverity;
exports.DiagnosticTag = DiagnosticTag;
exports.Diagnostic = Diagnostic;
exports.DocumentFilter = DocumentFilter;
exports.DocumentSelector = DocumentSelector;
exports.DiagnosticCollection = DiagnosticCollection;
exports.CallHierarchyItem = CallHierarchyItem;
exports.CallHierarchyOutgoingCall = CallHierarchyOutgoingCall;
exports.CallHierarchyIncomingCall = CallHierarchyIncomingCall;
exports.CallHierarchyProvider = CallHierarchyProvider;
exports.CodeActionProvider = CodeActionProvider;
exports.CodeActionProviderMetadata = CodeActionProviderMetadata;
exports.CodeLens = CodeLens;
exports.CodeLensProvider = CodeLensProvider;
exports.DocumentColorProvider = DocumentColorProvider;
exports.CompletionItemProvider = CompletionItemProvider;
exports.DeclarationProvider = DeclarationProvider;
exports.Hover = Hover;
exports.HoverProvider = HoverProvider;
exports.LocationLinkOrLocation = LocationLinkOrLocation;
exports.DefinitionProvider = DefinitionProvider;
exports.SemanticsTokens = SemanticsTokens;
exports.SemanticTokensLegend = SemanticTokensLegend;
exports.SemanticTokensBuilder = SemanticTokensBuilder;
exports.DocumentSemanticTokensProvider = DocumentSemanticTokensProvider;
exports.Languages = Languages;
/* No side effect */
